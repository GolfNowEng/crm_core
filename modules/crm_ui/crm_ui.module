<?php

/**
 * Implements hook_menu().
 */
function crm_ui_menu() {
  $items = array();

  /**
   * Base CRM menu
   */
  $items['crm'] = array(
    'title' => 'CRM',
    'page callback' => 'crm_core_ui_dashboard',
    'access arguments' => array('view crm dashboard'),
    'type' => MENU_NORMAL_ITEM,
    'theme callback' => 'crm_core_ui_get_theme',
  );

  $items['crm/dashboard'] = array(
    'title' => 'Dashboard',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE,
  );

  $items['admin/structure/crm'] = array(
    'title' => 'CRM',
    'description' => 'Manage contact types, activity types, and contact relationship types.',
    'page callback' => 'crm_ui_admin_dashboard',
    'access arguments' => array('access administration pages'),
    'file' => 'pages/crm_ui.pages.inc',
  );

  $items['admin/crm'] = array(
      'title' => 'CRM',
      'description' => 'CRM Core module and feature settings.',
      'position' => 'right',
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/crm-core'] = array(
    'title' => 'CRM Core Settings',
    'description' => 'CRM Core Settings page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_core_admin_config_form'),
    'access arguments' => array('administer crm-core settings'),
    'file' => 'pages/crm_ui.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function crm_ui_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  $items['admin/structure/crm/activity-types']['type'] = MENU_LOCAL_TASK;
  $items['admin/structure/crm/contact-types']['type'] = MENU_LOCAL_TASK;

  // Make Views menu item local task.
  $items['crm/contact/%/activity/add']['type'] = MENU_LOCAL_ACTION;
  $items['crm/contact/%/activity/add']['title'] = t('Add Activity');
  $items['crm/contact/%/activity/add']['tab_root'] = 'crm/contact/%/activity';

  // Set tab_root for views local actions.
  $items['crm/contact/%/activity']['tab_root'] = 'crm/contact/%';
  $items['crm/contact/%/revisions']['tab_root'] = 'crm/contact/%';

  // Alter Views menu item.
  $items['crm/contact/%/activity']['title'] = t('Activity');
  $items['crm/contact/%/activity']['type'] = MENU_LOCAL_TASK;
  $items['crm/contact/%/activity']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}

/**
 * Implements hook_permission().
 */
function crm_ui_permission() {
  return array(
    'view crm dashboard' => array(
      'title' => t('View CRM dashboard'),
      'description' => t('Use dashboard.'),
    ),
    'administer crm-core settings' => array(
      'title' => t('Administer CRM Core Settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function crm_ui_theme() {
  return array(
    'crm_ui_ctools_dropbutton' => array(
      'variables' => array('ops_count' => NULL, 'links' => array(), 'index' => NULL)
    )
  );
}

/**
 * Implements hook_admin_paths().
 */
function crm_ui_admin_paths() {
  $paths = array(
    'crm/admin' => TRUE,
    'crm/admin/*' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_block_info().
 */
function crm_ui_block_info() {
  $blocks['navigation'] = array(
    'info' => t('CRM Navigaiton'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crm_ui_block_view($delta) {
  module_load_include('inc', 'crm_ui', 'includes/crm_ui.blocks');

  $sub_func = 'crm_ui_block_' . $delta . '_subject';
  $con_func = 'crm_ui_block_' . $delta . '_content';

  if (!function_exists($sub_func) || !function_exists($con_func)) {
    return array();
  }

  return array(
    'subject' => $sub_func(),
    'content' => $con_func(),
  );
}

/**
 * Render CRM Core Dashboard, if configured, otherwise redirects to contacts list.
 */
function crm_core_ui_dashboard() {
  if (variable_get('crm_core_dashboard_enabled', FALSE)) {
    $dashboard_path = variable_get('crm_core_dashboard_path', '');
    // Get the content for the path.
    $output = menu_execute_active_handler($dashboard_path, FALSE);
    // If the callback returns an array instead of text, render it.
    if (is_array($output)) {
      $output = drupal_render($output);
    }
    return $output;
  }
  else {
    // Dashboard is not configured.
    drupal_set_message(t('No dashboard has been configured for CRM Core. Click !here to configure a dashboard.',
      array(
        '!here' => l(t('here'), 'admin/config/crm-core'),
      )
    ));
    drupal_goto('crm/contact');
  }
}

/**
 * Implements hook_views_pre_render()
 */
function crm_ui_views_pre_render($view) {
  if ($view->name == 'crm_activities_by_contact') {
    crm_ui_ctools_add_dropbutton_files();
  }
}

/**
 * Additional function that adds special CSS/JS files for dropbuttons
 */
function crm_ui_ctools_add_dropbutton_files() {
  // Add needed files
  ctools_add_js('dropbutton');
  ctools_add_css('dropbutton');
  ctools_add_css('button');

  // Add views & seven files
  views_add_css('views-admin');
  views_add_css('views-admin.ctools');
  views_add_css('views-admin.seven');
  drupal_add_css(drupal_get_path('module', 'crm_ui') . '/css/crm_ui.admin.css');
}

 /**
  * Theme function for operation links
  */
function theme_crm_ui_ctools_dropbutton($variables) {
  $output = '';

  $ops_count = $variables['ops_count'];
  $links = $variables['links'];
  $index = $variables['index'];

  if (is_array($links) && count($links)) {
    $item_list = array();
    for ($i = count($links) - $ops_count; $i < count($links); $i++) {
       $item_list['items'][] = $links[$i];
    }

    $class = 'ctools-no-js ctools-dropbutton ctools-button';
    $output .= '<div class="' . $class . '" id="ctools-button-' . $index . '">';
    $output .= '<div class="ctools-link">';
    $output .= '<a href="#" class="ctools-twisty ctools-text">' . t('open') . '</a>';
    $output .= '</div>';
    $output .= '<div class="ctools-content">';
    $output .= theme('item_list', $item_list);
    $output .= '</div>';
    $output .= '</div>';
  }

  return $output;
}

/**
 * Contains custom menu definitions of CRM Core.
 *
 * @return array
 *  Assoc array of menu items, keyed by menu name.
 */
function crm_core_ui_get_menus() {
  $t = get_t();
  return array(
    'crm-core-menu' => array(
      'menu_name' => 'crm-core-menu',
      'title' => $t('CRM Core Menu'),
      'description' => $t('Provides access to various features and functions within CRM Core.'),
    ),
    'crm-core-admin-menu' => array(
      'menu_name' => 'crm-core-admin-menu',
      'title' => $t('CRM Core Admin Menu'),
      'description' => $t('Provides access to various settings and configuration within CRM Core.'),
    )
  );
}

/**
 * Helper function to remove links by path from specified menu.
 *
 * @param $conditions
 *  Assoc array keyed by menu name. Each entry is array of paths, link to which should be removed.
 */
function crm_core_ui_remove_links($conditions) {
  foreach ($conditions as $menu_name => $links_path) {
    $links = menu_load_links($menu_name);
    foreach ($links as $link) {
      foreach ($links_path as $link_path) {
        if ($link['link_path'] == $link_path) {
          menu_link_delete($link['mlid']);
        }
      }
    }
  }
}

/**
 * Helper function to set theme to use for CRM Core pages.
 *
 * @return theme_name|NULL
 *  Machine theme name or NULL if not set.
 */
function crm_core_ui_get_theme() {
  if (variable_get('crm_core_theme_enabled', FALSE)) {
    return variable_get('crm_core_theme', '');
  }
}
