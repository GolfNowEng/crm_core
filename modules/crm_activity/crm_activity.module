<?php

/**
 * Implements hook_entity_info().
 */
function crm_activity_entity_info() {
  $return = array(
    'crm_activity' => array(
      'label' => t('Activity'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'crm_activity',
//      'revision table' => 'crm_activity_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'activity_id',
        'bundle' => 'type',
//        'revision' => 'revision_id',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'crm_activity_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'crm_activity_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'crm_activity',
    ),
  );
  $return['crm_activity_type'] = array(
    'label' => t('Activity Type'),
    'entity class' => 'CRMActivityType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'crm_activity_type',
    'fieldable' => FALSE,
    'bundle of' => 'crm_activity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'crm_activity',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'crm/admin/activity_types',
      'file' => 'crm_activity.admin.inc',
      'controller class' => 'CRMActivityTypeUIController',
    ),
    'access callback' => 'crm_activity_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function crm_activity_entity_info_alter(&$entity_info) {
  foreach (crm_activity_types() as $type => $info) {
    $entity_info['crm_activity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'crm/admin/activity_types/manage/%crm_activity_type',
        'real path' => 'crm/admin/activity_types/manage/' . $type,
        'bundle argument' => 4,
        // TODO write proper hook_permissions and set proper access callback here.
        'access callback' => TRUE,
        'access arguments' => array('administer site configuration'),
      ),
    );
  }
}

function crm_activity_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer activity types', $account);
}

/**
 * Use a separate class for profile types so we can specify some defaults
 * modules may alter.
 */
class CRMActivityType extends Entity {
  public $type;
  public $label;
  public $weight = 0;

  public function __construct($values = array()) {
    parent::__construct($values, 'crm_activity_type');
  }

  function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }
}

/**
 * Load a CRM Activity object.
 */
function crm_activity_load($activity_id, $reset = FALSE) {
  $activities = crm_activity_load_multiple(array($activity_id), array(), $reset);
  return reset($activities);
}

/**
 * Load multiple activities based on certain conditions.
 */
function crm_activity_load_multiple($activity_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_activity', $activity_ids, $conditions, $reset);
}


function crm_activity_create($values) {
  return new Entity($values, 'crm_activity');
}


function crm_activity_save($activity) {
  return entity_get_controller('crm_activity')->save($activity);
}

function crm_activity_delete($activity) {
  crm_activity_delete_multiple(array($activity->activity_id));
}

function crm_activity_delete_multiple($activity_ids) {
  entity_get_controller('crm_activity')->delete($activity_ids);
}

/**
 * CRM Activity Type helpers.
 */

/**
 * Load Activity Type.
 */
function crm_activity_type_load($activity_type) {
  return crm_activity_types($activity_type);
}

/**
 * List of Activity Types.
 */
function crm_activity_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('crm_activity_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Get label of activity type.
 *
 * Argument is activity type itself or its name.
 *
 * @param object $activity_type
 */
function crm_activity_type_label($activity_type) {
  if (!is_object($activity_type)) {
    $activity_type = crm_activity_type_load($activity_type);
  }

  return $activity_type->label;
}

/**
 * Implements hook_forms().
 *
 * Create form for adding/editing crm_activity.
 * Their id is like 'crm_activity_edit_' . $bundle . '_form'.
 *
 * @see entity_ui_get_form().
 */
function crm_activity_forms($form_id, $args) {
  $forms = array();

  // Check whether it is crm_activity form.
  if (strpos($form_id, 'crm_activity_edit_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'crm_activity_form',
    );
  }

  return $forms;
}

/**
 * Label callback for activity.
 *
 * Used to set title of the view activity page.
 */
function crm_activity_label($activity) {
  return $activity->title;
}
