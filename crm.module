<?php
// $Id$

/**
 * @file
 * Provides contact entities and basic CRM functionality.
 */


/**
 * Implements hook_entity_info().
 */
function crm_entity_info() {
  $return = array(
    'crm_contact' => array(
      'label' => t('Contact'),
      'controller class' => 'CRMContactController',
      'base table' => 'crm_contact',
      'uri callback' => 'crm_contact_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'contact_id',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Contact'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  foreach (crm_contact_type_get_name() as $type => $name) {
    $return['crm_contact']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'crm/admin/contact/types/%crm_contact_type',
        'real path' => 'crm/admin/contact/types/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer contact types'),
      ),
    );
  }

  return $return;
}


/**
 * Entity uri callback.
 */
function crm_contact_uri($contact) {
  return array(
    'path' => 'crm/contact/' . $contact->cid,
  );
}


/**
 * Implements hook_permission().
 */
function crm_permission() {
  return array(
    'administer contact types' => array(
        'title' => t('Administer Contact Types'),
        'description' => t('Allows the user to edit the types of contact such as Individual, Organization, etc.'),
    ),
  );
}


/**
 * Implements hook_views_api().
 */
function crm_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'crm') . '/includes/views',
  );
}


/**
 * Implemenets hook_theme().
 */
function crm_theme() {
  $theme = array(
    'crm_contact_type_overview' => array(
      'arguments' => array('contact_type' => NULL),
      'file' => 'theme/crm_contact_type.theme.inc',
    ),
  );

  return $theme;
}

/**
 * Implements hook_field_extra_fields().
 */
// function user_field_extra_fields() {
//   $return['user']['user'] = array(
//     'form' => array(
//       'account' => array(
//         'label' => 'User name and password',
//         'description' => t('User module account form elements'),
//         'weight' => -10,
//       ),
//       'timezone' => array(
//         'label' => 'Timezone',
//         'description' => t('User module timezone form element.'),
//         'weight' => 6,
//       ),
//     ),
//     'display' => array(
//       'summary' => array(
//         'label' => 'History',
//         'description' => t('User module history view element.'),
//         'weight' => 5,
//       ),
//     ),
//   );
// 
//   return $return;
// }



/**
 * Implements hook_menu().
 */
function crm_menu() {
  $items = array();
  
  /*
   * Contact types
   */
  $items['crm/admin/contact/types'] = array(
    'title' => 'Manage contact types',
    'page callback' => 'crm_contact_types_overview',
    'access arguments' => array('administer contact types'),
    'file' => 'pages/contact_types.pages.inc',
  );
  $items['crm/admin/contact/types/add'] = array(
    'title' => 'Add contact type',
    'page callback' => 'crm_contact_type_form_wrapper',
    'page arguments' => array(crm_contact_type_new()),
    'access arguments' => array('administer contact types'),
    'type' => MENU_LOCAL_ACTION | MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'pages/contact_types.pages.inc',
  );
  $items['crm/admin/contact/types/%crm_contact_type'] = array(
    'title' => 'Edit contact type',
    'title callback' => 'crm_contact_type_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_contact_type_form', 4),
    'access arguments' => array('administer contact types'),
    'file' => 'pages/contact_types.pages.inc',
  );
  $items['crm/admin/contact/types/%crm_contact_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['crm/admin/contact/types/%crm_contact_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crm_contact_type_delete_confirm', 4),
    'access arguments' => array('administer contact types'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'pages/contact_types.pages.inc',
    'weight' => 10,
  );

 
/*  
  $items['crm/%contact/%crm_contact'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_profile_form', 1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'user.pages.inc',
  );*/

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function crm_menu_alter(&$items) {
  // Transform the field UI tabs into contextual links.
  $items['crm/admin/contact/types/%crm_contact_type/fields']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
  $items['crm/admin/contact/types/%crm_contact_type/display']['context'] = MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE;
}


/**
 * Implements hook_admin_paths().
 */
function crm_admin_paths() {
  $paths = array(
    'crm/admin' => TRUE,
    'crm/admin/*' => TRUE,
    'crm/admin/contact/types' => TRUE,
    'crm/admin/contact/types/*' => TRUE,
  );

  return $paths;
}


/**
 * Returns an array of contact type objects keyed by type.
 */
function crm_contact_types() {
  // First check the static cache for a contact types array.
  $contact_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($contact_types)) {
    $contact_types = db_query('SELECT * FROM {crm_contact_type}')->fetchAllAssoc('type');
  }

  return $contact_types;
}


/**
 * Returns the human readable name of any or all contact types.
 *
 * @param $type
 *  [optional] - Specify the type whose name to return.
 * @return
 *  If $type is specified, a string containing the human
 *  readable name of the type.
 *  If $type isn't specified an array containing all human
 *  readable names keyed on the machine type.
 */
function crm_contact_type_get_name($type = NULL) {
  $contact_types = crm_contact_types();
 
  // If type is set return the name if it exists
  if (!empty($type)) {
    if (isset($contact_types[$type])) {
      return $contact_types[$type]->name;
    }
    else {
      return FALSE;
    }
  }
  
  // Otherwise return a mapping of type => name
  foreach ($contact_types as $key => $value) {
    $contact_types[$key] = $value->name;
  }

  return $contact_types;
}


/**
 * Return a new contact type with initialize fields.
 */
function crm_contact_type_new() {
  return (object) array(
    'type' => '',
    'name' => '',
    'description' => '',
    'help' => '',
  );
}


/**
 * Loads a contact type.
 * 
 * @param $type
 *   The machine-readable name of the contact type.
 */
function crm_contact_type_load($type) {
  return db_query("SELECT * FROM {crm_contact_type} WHERE type = :type", array(':type' => $type))->fetchObject();
}


/**
 * Saves a contact type.
 */
function crm_contact_type_save($contact_type) {
  $op = drupal_write_record('crm_contact_type', $contact_type, empty($contact_type->is_new) ? 'type' : array());
  menu_rebuild();

  // If this is a new contact type and the insert did not fail...
  if (!empty($contact_type->is_new) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('crm_contact', $contact_type->type);

    // Add base fields to the contact
    // crm_initiailze_contact_type($contact_type->type);

    // Notify other modules that a new contact type has been created.
    module_invoke_all('crm_contact_type_insert', $contact_type);
  }
  else {
    // Notify other modules that an existing contact type has been updated.
    module_invoke_all('crm_contact_type_update', $contact_type);
  }

  return $op;
}


function crm_contact_type_set_defaults($info = array()) {
  $type = &drupal_static(__FUNCTION__);

  if (!isset($type)) {
    $type = new stdClass();
    $type->type = '';
    $type->name = '';
    $type->description = '';
    $type->custom = 0;
    $type->modified = 0;
    $type->is_new = 1;
  }

  $new_type = clone $type;
  $info = (array) $info;
  foreach ($info as $key => $data) {
    $new_type->$key = $data;
  }
  $new_type->orig_type = isset($info['type']) ? $info['type'] : '';

  return $new_type;
}


/**
* Checks to see if a given contact type already exists.
*
* @param $type
* The string to match against existing types.
*
* @return
* TRUE or FALSE indicating whether or not the contact type exists.
*/
function crm_contact_type_validate_unique($type) {
  // Look for a match of the type.
  $match_id = db_query('SELECT type FROM {crm_contact_type} WHERE type = :type', array(':type' => $type))->fetchField();
  return !$match_id;
}


function crm_contact_save($contact) {
  return entity_get_controller('crm_contact')->save($contact);
}


function crm_contact_load($contact_id) {
  $contacts = crm_contact_load_multiple(array($contact_id));
  return $contacts ? reset($contacts) : FALSE;
}


function crm_contact_load_multiple($contact_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_contact', $contact_ids, $conditions, $reset);
}