<?php
// $Id$

/**
 * @file
 * Provides contact entities and basic CRM functionality.
 */


/**
 * Implements hook_entity_info().
 */
function crm_entity_info() {
  $return = array(
    'crm_contact' => array(
      'label' => t('Contact'),
      'label callback' => 'crm_contact_label',
      'controller class' => 'CRMContactController',
      'base table' => 'crm_contact',
      'revision table' => 'crm_contact_revision',
      'uri callback' => 'crm_contact_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'contact_id',
        'revision' => 'vid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Contact'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  foreach (crm_contact_type_get_name() as $type => $name) {
    $return['crm_contact']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'crm/admin/contact/types/%crm_contact_type',
        'real path' => 'crm/admin/contact/types/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer contact types'),
      ),
    );
  }

  return $return;
}


/**
 * Entity uri callback.
 */
function crm_contact_uri($contact) {
  return array(
    'path' => 'crm/contact/' . $contact->contact_id,
  );
}

/**
 * Entity label callback.
 */
function crm_contact_label($entity) {
  $build_info = crm_contact_view($entity);
  return render($build_info['contact_name'][0]);
}

/**
 * Implements hook_permission().
 */
function crm_permission() {
  return array(
    'administer contact types' => array(
      'title' => t('Administer Contact Types'),
      'description' => t('Allows the user to edit the types of contact such as Individual, Organization, etc.'),
    ),
    'add contacts' => array(
      'title' => t('Add Contacts'),
      'description' => t('Allows the user to add contact to the CRM.'),
    ),
    'edit contacts' => array(
      'title' => t('Edit Contacts'),
      'description' => t('Allows the user to edit contacts that have already been added to the CRM.'),
    ),
    'add crm relationships' => array(
      'title' => t('Add Relationships'),
      'description' => t('Allows user to add relationship to the CRM contact.'),
    ),
    'edit crm relationships' => array(
      'title' => t('Edit Relationships'),
      'description' => t('Allows user to edit relationship of the CRM contact.'),
    ),
    'administer crm relationship' => array(
      'title' => t('Administer Relationships'),
      'description' => t('Allows user to administer CRM relationships.'),
     )
  );
}


/**
 * Implements hook_views_api().
 */
function crm_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm') . '/includes/views',
  );
}

/**
 * Returns an array of contact type objects keyed by type.
 */
function crm_contact_types() {
  // First check the static cache for a contact types array.
  $contact_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($contact_types)) {
    $contact_types = db_query('SELECT * FROM {crm_contact_type}')->fetchAllAssoc('type');
  }

  return $contact_types;
}


/**
 * Returns the human readable name of any or all contact types.
 *
 * @param $type
 *  [optional] - Specify the type whose name to return.
 * @return
 *  If $type is specified, a string containing the human
 *  readable name of the type.
 *  If $type isn't specified an array containing all human
 *  readable names keyed on the machine type.
 */
function crm_contact_type_get_name($type = NULL) {
  $contact_types = crm_contact_types();

  // If type is set return the name if it exists
  if (!empty($type)) {
    if (isset($contact_types[$type])) {
      return $contact_types[$type]->name;
    }
    else {
      return FALSE;
    }
  }

  // Otherwise return a mapping of type => name
  foreach ($contact_types as $key => $value) {
    $contact_types[$key] = $value->name;
  }

  return $contact_types;
}


/**
 * Return a new contact type with initialize fields.
 *
 * @param string $type
 *   The machine-readable name of the contact type. (eg. individual)
 *
 * @return
 *   A stdClass object with contact type fields
 */
function crm_contact_type_new($type = '') {
  return (object) array(
    'type' => $type,
    'name' => '',
    'description' => '',
    'help' => '',
  );
}


/**
 * Loads a contact type.
 *
 * @param string $type
 *   The machine-readable name of the contact type.
 */
function crm_contact_type_load($type) {
  return db_query("SELECT * FROM {crm_contact_type} WHERE type = :type", array(':type' => $type))->fetchObject();
}


/**
 * Saves a contact type.
 *
 * @param $contact_type object
 *
 * @return 
 *   FALSE if the insert fails and SAVED_NEW or SAVED_UPDATED
 *   based on the operation performed
 */
function crm_contact_type_save($contact_type) {
  $op = drupal_write_record('crm_contact_type', $contact_type, empty($contact_type->is_new) ? 'type' : array());
  menu_rebuild();

  // If this is a new contact type and the insert did not fail...
  if (!empty($contact_type->is_new) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('crm_contact', $contact_type->type);

    // Add base fields to the contact
    crm_initialize_contact_type($contact_type->type);

    // Notify other modules that a new contact type has been created.
    module_invoke_all('crm_contact_type_insert', $contact_type);
  }
  else {
    // Notify other modules that an existing contact type has been updated.
    module_invoke_all('crm_contact_type_update', $contact_type);
  }

  return $op;
}

/** 
 * Sets the default contact type
 * @param arary $info
 *   an associative array of contact type information
 *   possible keys:
 *     - type
 *     - name
 *     - description
 *     - custom
 *     - modified
 *     - is_new 
 *
 * @return 
 * A default contact type  
 */
function crm_contact_type_set_defaults($info = array()) {
  $type = &drupal_static(__FUNCTION__);

  if (!isset($type)) {
    $type = new stdClass();
    $type->type = '';
    $type->name = '';
    $type->description = '';
    $type->custom = 0;
    $type->modified = 0;
    $type->is_new = 1;
  }

  $new_type = clone $type;
  $info = (array) $info;
  foreach ($info as $key => $data) {
    $new_type->$key = $data;
  }
  $new_type->orig_type = isset($info['type']) ? $info['type'] : '';

  return $new_type;
}


/**
 * Initialize new contact type with basic fields.
 * 
 * @param string $type
 *   The contact type (machine readable name) going to be
 *   stored in the field instance 
 */
function crm_initialize_contact_type($type) {
  $fields = array();

  // Name field
  $fields[] = array(
    'field_name' => 'contact_name',
    'type' => 'name',
    'entity_types' => array('crm_contact'),
    'translatable' => FALSE,
    'locked' => TRUE,
  );

  // Image field
  $fields[] = array(
    'field_name' => 'contact_image',
    'type' => 'image',
    'entity_types' => array('crm_contact'),
    'translatable' => FALSE,
    'locked' => FALSE,
  );

  // Create the fields if they don't exist
  foreach ($fields as $field) {
    $info = field_info_field($field['field_name']);
    if (empty($info)) {
      field_create_field($field);
    }
  }

  // Create field instances for the type if they don't exist
  $instances = array();

  $instances[] = array(
    'field_name' => 'contact_name',
    'entity_type' => 'crm_contact',
    'bundle' => $type,
    'label' => t('Name'),
    'required' => TRUE,
    'settings' => array(),
    'widget' => array(
      'type' => 'name_widget',
    ),
    'display' => array(),
  );

  $instances[] = array(
    'field_name' => 'contact_image',
    'entity_type' => 'crm_contact',
    'bundle' => $type,
    'label' => t('Image'),
    'required' => FALSE,
    'settings' => array(),
    'widget' => array(
      'type' => 'image_image',
    ),
    'display' => array(),
  );

  // Create field instances if they don't exist
  foreach ($instances as $instance) {
    $info_instance = field_info_instance('crm_contact', $instance['field_name'], $type);
    if (empty($info_instance)) {
      field_create_instance($instance);
    }
  }
}


/**
* Checks to see if a given contact type already exists.
*
* @param $type
* The string to match against existing types.
*
* @return
* TRUE or FALSE indicating whether or not the contact type exists.
*/
function crm_contact_type_validate_unique($type) {
  // Look for a match of the type.
  $match_id = db_query('SELECT type FROM {crm_contact_type} WHERE type = :type', array(':type' => $type))->fetchField();
  return !$match_id;
}

/**
 * Save a contact
 *
 * @param stdClass $contact
 *   The contact object to be saved
 *
 * @return
 *   a contact object upon successful save
 *   or an exception thrown
 */
function crm_contact_save($contact) {
  return entity_get_controller('crm_contact')->save($contact);
}

/**
 * Load a contact
 *
 * @param int $contact_id
 *   Contact id of the contact to be loaded
 * @param array $conditions
 *   @see crm_contact_load_multiple()
 * @return
 *   A contact object upon successful load
 *   FALSE if loading fails
 */
function crm_contact_load($contact_id, $conditions = array()) {
  $contacts = crm_contact_load_multiple(array($contact_id), $conditions);
  return $contacts ? reset($contacts) : FALSE;
}

/**
 * Load one or more contact
 *
 * @param array $contact_ids
 *   An array of contact id to be loaded
 * @param array $conditions (deprecated)
 *   An associative array of conditions on the base table
 *   with keys equal to the field name and value equal to
 *   the value the fields must have
 *
 * @return
 *   An array of entity object indexed by their ids
 */
function crm_contact_load_multiple($contact_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_contact', $contact_ids, $conditions, $reset);
}


/**
 * Delete single contact records
 *   The wrapper for delete() method of 'crm_contact' controller.
 *
 * @param $contact_id
 * contact id
 *
 * @return
 * TRUE or throw exception and write it to watchdog.
 */
function crm_contact_delete($contact_id) {
  return crm_contact_delete_multiple(array($contact_id));
}


/**
 * Delete multiply contact records
 *   The wrapper for delete() method of 'crm_contact' controller.
 *
 * @param $contact_ids
 * flat array of contact ids like array(5, 6, 7);
 *
 * @return
 * TRUE or throw exception and write it to watchdog.
 */
function crm_contact_delete_multiple($contact_ids = array()) {
  return entity_get_controller('crm_contact')->delete($contact_ids);
}


/**
 * View a single contact record.
 */
function crm_contact_view($contact) {
  field_attach_prepare_view('crm_contact', array($contact->contact_id => $contact), 'full');
  return field_attach_view('crm_contact', $contact, 'full');
}

/**
 * Title callback for a contact.
 *
 * @param $contact object
 *
 * @return title string
 */
function crm_contact_title($contact) {
  $element = field_view_value('crm_contact', $contact, 'contact_name', $contact->contact_name['und'][0]);
  return drupal_render($element);
}

/**
 * Fetch revision list for a contact
 *
 * @param stdClass $contact
 *
 * @return
 *   An associative array of revision information for 
 *   a given contact (keys below)
 *     - vid
 *     - log
 *     - created
 *     - changed
 *     - uid
 */
function crm_contact_revision_list($contact) {
  return db_select('crm_contact_revision', 'rev')->
           fields('rev', array('vid', 'log', 'created', 'changed', 'uid'))->
           condition('contact_id', $contact->contact_id)->
           execute()->
           fetchAllAssoc('vid', $fetch);
}

/**
 * Return a contact object structure
 *
 * @param stdClass $contact
 *
 * @return
 * A structured contact string
 */
function crm_contact_devel_load_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');
  return devel_load_object('crm_contact', $contact);
}

/**
 * Print the contact structure being loaded
 *
 * @param stdClass $contact
 *
 * @return
 * prints a structured contact object
 */
function crm_contact_devel_render_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');
  return devel_render_object('crm_contact', $contact);
}

/**
 * Revert a contact to a previous revision
 *
 * @param stdClass $contact
 * @param int $vid
 *
 * @return
 * TRUE upon success, FALSE upon failure
 */
function crm_contact_revert($contact, $vid) {
  return entity_get_controller('crm_contact')->revertContact($contact, $vid);
}

/**
 * Return permission names for a given entity type.
 *
 * Copied from commerce_entity_access_permissions().
 *
 * @param string $entity_type
 *
 * @return 
 *   An associative array of entity permissions
 */
function crm_entity_access_permissions($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $labels = $entity_info['permission labels'];

  $permissions = array();

  // General 'administer' permission.
  $permissions['administer ' . $entity_type . ' entities'] = array(
    'title' => t('Administer @entity_type', array('@entity_type' => $labels['plural'])),
    'description' => t('Allows users to perform any action on @entity_type.', array('@entity_type' => $labels['plural'])),
    'restrict access' => TRUE,
  );

  // Generic create and edit permissions.
  $permissions['create ' . $entity_type . ' entities'] = array(
    'title' => t('Create @entity_type of any type', array('@entity_type' => $labels['plural'])),
  );
  if (!empty($entity_info['access arguments']['user key'])) {
    $permissions['edit own ' . $entity_type . ' entities'] = array(
      'title' => t('Edit own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }
  $permissions['edit any ' . $entity_type . ' entity'] = array(
    'title' => t('Edit any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );
  if (!empty($entity_info['access arguments']['user key'])) {
    $permissions['view own ' . $entity_type . ' entities'] = array(
      'title' => t('View own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }
  $permissions['view any ' . $entity_type . ' entity'] = array(
    'title' => t('View any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );

  // Per-bundle create and edit permissions.
  if (!empty($entity_info['entity keys']['bundle'])) {
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      $permissions['create ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
        'title' => t('Create %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
      );
      if (!empty($entity_info['access arguments']['user key'])) {
        $permissions['edit own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('Edit own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
      }
      $permissions['edit any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('Edit any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
      if (!empty($entity_info['access arguments']['user key'])) {
        $permissions['view own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('View own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
      }
      $permissions['view any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('View any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
    }
  }

  return $permissions;
}
